{"ast":null,"code":"import { START_LOADING, END_LOADING, FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\nimport * as api from '../api/index.js';\nexport const getPosts = page => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: START_LOADING\n    });\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["START_LOADING","END_LOADING","FETCH_ALL","FETCH_POST","FETCH_BY_SEARCH","CREATE","UPDATE","DELETE","LIKE","api","getPosts","page","dispatch","data","fetchPosts","type","payload","error","console","log","message","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","updatePost","id","deletePost","likePost"],"sources":["/Users/wjz8597/crudApp/client/src/actions/posts.js"],"sourcesContent":["import { START_LOADING, END_LOADING, FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\nimport * as api from '../api/index.js';\n\nexport const getPosts = (page) => async (dispatch) => {\n    try {\n        const {data} = await api.fetchPosts(page);\n        dispatch({type: START_LOADING});\n        dispatch({type: FETCH_ALL, payload: data});\n        dispatch({type: END_LOADING});\n    } catch (error) {\n        console.log(error.message);\n    }\n};\n\n\nexport const getPostsBySearch = (searchQuery) =>  async (dispatch) => {\n    try {\n        const {data: {data}} = await api.fetchPostsBySearch(searchQuery);\n        dispatch({type: FETCH_BY_SEARCH, payload: data});\n    } catch(error) {\n        console.log(error);\n    }\n}\n\n\nexport const createPost = (post) => async (dispatch) => {\n    try {\n        const {data} = await api.createPost(post);\n        dispatch({type:CREATE, payload: data});\n    } catch (error) {\n        console.log(error.message);\n    }\n};\n\n\nexport const updatePost = (id, post) => async (dispatch) => {\n    try {\n        const {data} = await api.updatePost(id, post);\n        dispatch({type: UPDATE, payload: data});\n    } catch (error) {\n        console.log(error.message);\n    }\n}\nexport const deletePost = (id) => async (dispatch) => {\n    try {\n        await api.deletePost(id);\n        dispatch({type:DELETE, payload:id});\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const likePost = (id) => async (dispatch) => {\n    try {\n        const {data} = await api.likePost(id);\n        dispatch({type:LIKE, payload:data});\n    } catch (error) {\n        console.log(error);\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}